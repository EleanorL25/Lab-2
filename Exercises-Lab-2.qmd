---
title: "Lab 2 ESS330"
author: "Eleanor Lindsey"
format: html
editor: visual
---

```{r setup}
options(repos = c(CRAN = "https://cloud.r-project.org/")) #I kept getting an error of "unnamed chunk" that I could not figure out how to fix. I had to resort to deepseek AI which helped me with the CRAN function. 
install.packages("dplyr")
install.packages('readr')
library(dplyr)
library(readr)
tree_dat<-read_csv('~/Documents/ESS330-Quantitative-Reasoning/github/Lab-2/data/tree_dat.csv')
head(tree_dat)
```

##Question 1
```{r question 1}
#1
tree_dat%>%summarise(n=n())
nrow(tree_dat)
#Answer=131386
```
##Question 2
```{r question 2}
#2 look at this data set then select the rows with ID 1, and then tally that count.

tree_count1<-tree_dat %>% 
  filter(standID==1)%>%
  tally()
  
#answer=979
```
##Question 3
```{r question 3}
#3 Filter tree species ABBA and PIST and count the occurances of each species 
Tree_Species_Count<-tree_dat%>%
    filter(species %in% c("ABBA", "PIST"))%>%
    count(species)
 #Answer: ABBA=13033,PIST=4188
```
##Question 4
```{r question 4}
#4 How many trees are older than 200 years old in the last year of the data set
last_year<- max(tree_dat$year, na.rm=TRUE) 

tree_dat%>%
  filter(year==last_year, age>200)%>%
  tally()
#answer=7 trees

#filter is used when you want to pick a specific thing out of a data set. 
#Tally counts the number of occurances based on the filtering of the data set. (Head, Print, Count all do the same thing as Tally)
#%>% is used to connect each peice so the tally knows to count the filter of the tree data
```
##Question 5
```{r question 5}
#5
oldest_tree<-tree_dat%>%
    slice_max(order_by=age, n=1)
print(oldest_tree)
#Answer=260 years old

#n=1 selects the single oldest tree. If i put n=2 it would select the two oldest trees
# order_by chooses the order in which R categorizes the data in this case it is by year
#Slice_max picks out the value from the data set with the maximum age
```
##Question 6
```{r question 6}
#6
#Find the oldest trees from 2001
Oldest_trees_2001<-tree_dat%>%
  filter(year==2001)%>%
  slice_max(order_by=age, n=5)
print(Oldest_trees_2001)
#Answer= 263, 259, 212, 206, and 206 years old
```
##Question 7
```{r question 7}
#7
Trees_30percent_2002<-tree_dat%>%
  filter(year==2002)%>%
  slice_sample(prop=0.3)%>%
  summarize(n=n())

print(Trees_30percent_2002)
#Answer=687 trees

#Slice_Sample takes a sample from the year 2002 as the filter states. 
#prop is the "proportion" or percentage of the slice in this case 0.3 or 30% of the year 2002
#Summarize n=n gathers this new categorization of data and creates a new table. The n=n just means there is no cap for the amount of figures that can be represented.
```
##Question 8
```{r question 8}
#8
tree_dat%>%
  filter(year==2007)%>%
  filter(standID==5)%>%
  arrange(-rad_ib)%>%
  slice_head(n=3)
#Answer= 238,217,210

#the filter function is separating the data from 2007 from the rest of the data frame. Filter is also taking data from the fifth standID from the data frame. 
#Arrange is arranging the radius column in descending order (hence the - sign in front of the column name).
#The slice_head function is taking the top three trees from the descending list provided above. 
```
##Question 9
```{r question 9}
#9
Consolidated_tree_table<-tree_dat%>%
  select(treeID,standID,year,rad_ib)%>%
  filter(standID==3,year==2007)%>%
  slice_min(rad_ib, n=3)
# The purpose of this code is to remove unneeded columns from the data frame. Using the select function I selected the columns I wanted to keep. 
#By using the filter function I took the selected columns and focused on the year 2007 and the standID 3. 
#By slicing I took this new table I created and told R to only use the top 3 values from the radius column. 
```
##Question 10
```{r question 10}
#10
tree_dat%>%
  select(!stand)%>%
  glimpse()
# Taking the tree data dataframe I selected the stand column and by placing an exclamation point in front of the column I told R to remove it from the data frame. 
```
##Question 11
```{r question 11}
#11
tree_dat%>%
  select(contains("ID"))%>%
  glimpse()
# Using the select funtion I created a table of columns containing the word ID.
```
##Question 12
```{r question 12}
#12
tree_dat%>%
  select(contains(c("ID","stand")))%>%
  glimpse()
# the select function with the c() creates a list for R to use to identify column names with ID and stand in the name and populate a table with just these columns. 
```
##Question 13
```{r question 13}
#13
With_units<-tree_dat%>%rename(rad_mm=rad_ib, inc_mm=inc)%>%
  glimpse()
# I created a new table using the Tree data frame. I renamed the radius and inc columns to include units.
```
##Question 14
```{r question 14}
#14
With_units |>
  mutate(
    rad_ib_cm = rad_mm / 10,
    DBH_cm = 2 * rad_ib_cm,
    BA_m2 = 0.00007854 * DBH_cm^2
    ) |>
  filter(species == "POTR", year == 2007) |>
  summarise(mean_BA = mean(BA_m2, na.rm = TRUE))
#Answer: 0.037
```
##Question 15
```{r question 15}
#15
tree_dat |>
  mutate(established = if_else(age>5, TRUE, FALSE)) |>
  count(established)
#Answer: FALSE, 8883.
  #TRUE 122503
```
##Question 16
```{r question 16}
#16
With_units |>
  mutate(
    rad_ib_cm = rad_mm / 10,
    DBH_cm = 2 * rad_ib_cm,
    ) |>
  mutate(DBH_classified = case_when(
    DBH_cm >= 0.01 & DBH_cm < 2.5 ~ "seedling", 
    DBH_cm >= 2.5 & DBH_cm < 10 ~ "sapling",  
    DBH_cm >= 10 & DBH_cm < 30 ~ "pole",  
    DBH_cm >= 30 ~ "sawlog",            
    TRUE ~ "unknown")) |>
  filter(year == 2007) |>
  count(DBH_classified)
#Answer: Pole(1963), Sapling(252), Sawlog(76)
```
##Question 17
```{r question 17}
#17
With_units |>
  filter(year == 2007) |>
  mutate(
    rad_ib_cm = rad_mm / 10,
    DBH_cm = as.numeric(2 * rad_ib_cm),
    ) |>
  summarize(mean_DBH = mean(DBH_cm, na.rm = TRUE))

With_units |>
  filter(year == 2007) |>
  mutate(
    rad_ib_cm = rad_mm / 10,
    DBH_cm = as.numeric(2 * rad_ib_cm),
    ) |>
  summarise(sd_DBH = sd(DBH_cm, na.rm = TRUE))
#Answer:6.14
```
##Question 18
```{r question 18}
#18
tree_dat |>
  filter(year == 2003) |>
  group_by(species) |>
  summarize(mean_age = mean(age, na.rm = TRUE)) |>
  arrange(-mean_age) |>
  slice_max(mean_age, n = 3) |>
  print()
#Answer: THOS(126.64), FRNI(83.08), PIST(73.29)
```
##Question 19
```{r question 19}
#19
tree_dat |>
  summarize(
    num_unique_years = n_distinct(year),
    first_year = min(year),
    last_year = max(year) 
  ) |>
  print()
#Answer: 111, 1897, 2007
```
##Question 20
```{r question 20}
#20
tree_dat |>
  group_by(stand) |>
  summarize(num_unique_years = n_distinct(year)) |>
  ungroup() |>
  filter(num_unique_years == max(num_unique_years)) |>
  print()
# Stand A1(111), D1(111), D2(111), D3(111), F1(111)
```

##Final Question
```{r final question}
With_units |>
  group_by(species) |>
  mutate(
    rad_ib_cm = rad_mm / 10,
    DBH_cm = 2 * rad_ib_cm,
    lagged_growth = lag(DBH_cm),
    growth_rate = DBH_cm - lagged_growth
  ) |>
  summarize(avg_growth_rate = mean(growth_rate, na.rm = TRUE), .groups = "drop") |>
  arrange(avg_growth_rate) |>
  slice(1:3)


With_units |>
  group_by(species) |>
  mutate(
    rad_ib_cm = rad_mm / 10,
    DBH_cm = 2 * rad_ib_cm,
    lagged_growth = lag(DBH_cm),
    growth_rate = DBH_cm - lagged_growth
  ) |>
  summarize(avg_growth_rate = mean(growth_rate, na.rm = TRUE), .groups = "drop") |>
  arrange(-avg_growth_rate) |>
  slice(1:3)
#Answer: LALA (0.02), POGR(0.006),THOC(0.005)
```

![The American Larch (Larix Laricina) is the fastest growing species of tree according to the data provided](images/Larix%20Laracina.jpeg)
